rownames(col_p) = colnames(train_data)
signif = subset(col_p, Culture_p_values < 0.05)
knitr::kable(signif)
col_p = data.frame(value = numeric())
for (i in 1:length(colnames(train_data))){
q = wilcox.test(train_data[,i]~training, exact = F)
col_p = rbind(col_p, q$p.value)
}
col_p = data.frame(value = numeric())
for (i in 1:length(colnames(train_data))){
q = wilcox.test(train_data[,i]~training, exact = F)
col_p = rbind(col_p, q$p.value)
}
training = as.factor(as.character(training))
training = df[,'NTM Culture']
training = as.factor(as.character(training))
train_data = as.data.frame(df[,2:17])
View(train_data)
row.names(train_data) = df[,1]
train_data = as.data.frame(lapply(train_data, function(x) as.numeric(as.character(x))))
View(train_data)
col_p = data.frame(value = numeric())
for (i in 1:length(colnames(train_data))){
q = wilcox.test(train_data[,i]~training, exact = F)
col_p = rbind(col_p, q$p.value)
}
len(training)
length(training)
rm(traing)
rm(training)
df = read.csv('data/Balanced_with_Culture_Status.csv', header = T, stringsAsFactors = F)
training = df[,'NTM Culture']
training = df[,'NTM culture']
View(df)
training = df[,'NTM.Culture']
training = as.factor(as.character(training))
train_data = as.data.frame(df[,2:17])
row.names(train_data) = df[,1]
train_data = as.data.frame(lapply(train_data, function(x) as.numeric(as.character(x))))
### Observed Species
col_p = data.frame(value = numeric())
for (i in 1:length(colnames(train_data))){
q = wilcox.test(train_data[,i]~training, exact = F)
col_p = rbind(col_p, q$p.value)
}
colnames(col_p) = "Culture_p_values"
rownames(col_p) = colnames(train_data)
signif = subset(col_p, Culture_p_values < 0.05)
knitr::kable(signif)
View(col_p)
df = read.csv('data/Balanced_NTM_Counts.csv', header = T, stringsAsFactors = F)
## Split, convert to numeric, and factorize
training = df[,'NTM_Counts_Categories']
training = as.factor(as.character(training))
train_data = as.data.frame(df[,2:17])
row.names(train_data) = df[,1]
train_data = as.data.frame(lapply(train_data, function(x) as.numeric(as.character(x))))
### Observed Species
col_p = data.frame(value = numeric())
for (i in 1:length(colnames(train_data))){
q = wilcox.test(train_data[,i]~training, exact = F)
col_p = rbind(col_p, q$p.value)
}
colnames(col_p) = "Culture_p_values"
rownames(col_p) = colnames(train_data)
signif = subset(col_p, Culture_p_values < 0.05)
knitr::kable(signif)
df = read.csv('data/Balanced_NTM_Counts.csv', header = T, stringsAsFactors = F)
## Split, convert to numeric, and factorize
training = df[,'NTM_Counts_Categories']
training = as.factor(as.character(training))
train_data = as.data.frame(df[,2:17])
row.names(train_data) = df[,1]
train_data = as.data.frame(lapply(train_data, function(x) as.numeric(as.character(x))))
### Observed Species
col_p = data.frame(value = numeric())
for (i in 1:length(colnames(train_data))){
q = wilcox.test(train_data[,i]~training, exact = F)
col_p = rbind(col_p, q$p.value)
}
colnames(col_p) = "Culture_p_values"
rownames(col_p) = colnames(train_data)
signif = subset(col_p, Culture_p_values < 0.05)
knitr::kable(col_p)
df = read.csv('data/Balanced_with_Culture_Status.csv', header = T, stringsAsFactors = F)
## Split, convert to numeric, and factorize
training = df[,'NTM.Culture']
training = as.factor(as.character(training))
train_data = as.data.frame(df[,2:17])
row.names(train_data) = df[,1]
train_data = as.data.frame(lapply(train_data, function(x) as.numeric(as.character(x))))
### Observed Species
col_p = data.frame(value = numeric())
for (i in 1:length(colnames(train_data))){
q = wilcox.test(train_data[,i]~training, exact = F)
col_p = rbind(col_p, q$p.value)
}
colnames(col_p) = "Culture_p_values"
rownames(col_p) = colnames(train_data)
signif = subset(col_p, Culture_p_values < 0.05)
knitr::kable(col_p)
View(col_p)
p = ggplot(data = df, aes(training, Maghemite, color=Maghemite)) + geom_boxplot(outlier.shape = NA) + geom_jitter(width = 0.1) + scale_colour_gradientn(colours = myPalette(2), values=seq(0, 130, length.out=130)/130)
p + stat_compare_means(comparisons = list(c("pos.", "neg.")), method = "wilcox.test", paired = FALSE, label = "p.signif") + stat_compare_means(label.x = 1.7, label.y = 20)+ theme_bw() +
ggtitle("Maghemite Measure by Culture Status") + theme(axis.text.y = element_text(colour="grey20",size=15,angle=0,hjust=1,vjust=0,face="plain"),
axis.title.y = element_text(colour="grey20",size=15,angle=90,hjust=.5,vjust=.5,face="plain"),
axis.text.x = element_text(colour="grey20",size=15,angle=0,hjust=0.5,vjust=0,face="plain"),
axis.title.x = element_text(colour="grey20",size=17,angle=0,hjust=.5,vjust=.5,face="plain"))
p = ggplot(data = df, aes(training, Maghemite, color=Maghemite)) + geom_boxplot(outlier.shape = NA) + geom_jitter(width = 0.1) + scale_colour_gradientn(colours = myPalette(2), values=seq(0, 130, length.out=130)/130)
library(ggplot2)
p = ggplot(data = df, aes(training, Maghemite, color=Maghemite)) + geom_boxplot(outlier.shape = NA) + geom_jitter(width = 0.1) + scale_colour_gradientn(colours = myPalette(2), values=seq(0, 130, length.out=130)/130)
library(EMA)
p = ggplot(data = df, aes(training, Maghemite, color=Maghemite)) + geom_boxplot(outlier.shape = NA) + geom_jitter(width = 0.1) + scale_colour_gradientn(colours = myPalette(2), values=seq(0, 130, length.out=130)/130)
p + stat_compare_means(comparisons = list(c("pos.", "neg.")), method = "wilcox.test", paired = FALSE, label = "p.signif") + stat_compare_means(label.x = 1.7, label.y = 20)+ theme_bw() +
ggtitle("Maghemite Measure by Culture Status") + theme(axis.text.y = element_text(colour="grey20",size=15,angle=0,hjust=1,vjust=0,face="plain"),
axis.title.y = element_text(colour="grey20",size=15,angle=90,hjust=.5,vjust=.5,face="plain"),
axis.text.x = element_text(colour="grey20",size=15,angle=0,hjust=0.5,vjust=0,face="plain"),
axis.title.x = element_text(colour="grey20",size=17,angle=0,hjust=.5,vjust=.5,face="plain"))
p + stat_compare_means(comparisons = list(c(1, 0)), method = "wilcox.test", paired = FALSE, label = "p.signif") + stat_compare_means(label.x = 1.7, label.y = 20)+ theme_bw() +
ggtitle("Maghemite Measure by Culture Status") + theme(axis.text.y = element_text(colour="grey20",size=15,angle=0,hjust=1,vjust=0,face="plain"),
axis.title.y = element_text(colour="grey20",size=15,angle=90,hjust=.5,vjust=.5,face="plain"),
axis.text.x = element_text(colour="grey20",size=15,angle=0,hjust=0.5,vjust=0,face="plain"),
axis.title.x = element_text(colour="grey20",size=17,angle=0,hjust=.5,vjust=.5,face="plain"))
library(ggpubr)
p = ggplot(data = df, aes(training, Maghemite, color=Maghemite)) + geom_boxplot(outlier.shape = NA) + geom_jitter(width = 0.1) + scale_colour_gradientn(colours = myPalette(2), values=seq(0, 130, length.out=130)/130)
p + stat_compare_means(comparisons = list(c(1, 0)), method = "wilcox.test", paired = FALSE, label = "p.signif") + stat_compare_means(label.x = 1.7, label.y = 20)+ theme_bw() +
ggtitle("Maghemite Measure by Culture Status") + theme(axis.text.y = element_text(colour="grey20",size=15,angle=0,hjust=1,vjust=0,face="plain"),
axis.title.y = element_text(colour="grey20",size=15,angle=90,hjust=.5,vjust=.5,face="plain"),
axis.text.x = element_text(colour="grey20",size=15,angle=0,hjust=0.5,vjust=0,face="plain"),
axis.title.x = element_text(colour="grey20",size=17,angle=0,hjust=.5,vjust=.5,face="plain"))
p + stat_compare_means(comparisons = list(c(1, 0)), method = "wilcox.test", paired = FALSE, label = "p.signif") + stat_compare_means(label.x = 1.7, label.y = 3)+ theme_bw() +
ggtitle("Maghemite Measure by Culture Status") + theme(axis.text.y = element_text(colour="grey20",size=15,angle=0,hjust=1,vjust=0,face="plain"),
axis.title.y = element_text(colour="grey20",size=15,angle=90,hjust=.5,vjust=.5,face="plain"),
axis.text.x = element_text(colour="grey20",size=15,angle=0,hjust=0.5,vjust=0,face="plain"),
axis.title.x = element_text(colour="grey20",size=17,angle=0,hjust=.5,vjust=.5,face="plain"))
p + stat_compare_means(comparisons = list(c(1, 0)), method = "wilcox.test", paired = FALSE, label = "p.signif") + stat_compare_means(label.x = 1.7, label.y = 2.3)+ theme_bw() +
ggtitle("Maghemite Measure by Culture Status") + theme(axis.text.y = element_text(colour="grey20",size=15,angle=0,hjust=1,vjust=0,face="plain"),
axis.title.y = element_text(colour="grey20",size=15,angle=90,hjust=.5,vjust=.5,face="plain"),
axis.text.x = element_text(colour="grey20",size=15,angle=0,hjust=0.5,vjust=0,face="plain"),
axis.title.x = element_text(colour="grey20",size=17,angle=0,hjust=.5,vjust=.5,face="plain")) + scale_x_discrete(labels=c("Negative Culture", "Positive Culture"))
p + stat_compare_means(comparisons = list(c(1, 0)), method = "wilcox.test", paired = FALSE, label = "p.signif") + stat_compare_means(label.x = 1.7, label.y = 2.3)+ theme_bw() +
ggtitle("Maghemite Measure by Culture Status") + theme(axis.text.y = element_text(colour="grey20",size=15,angle=0,hjust=1,vjust=0,face="plain"),
axis.title.y = element_text(colour="grey20",size=15,angle=90,hjust=.5,vjust=.5,face="plain"),
axis.text.x = element_text(colour="grey20",size=12,angle=0,hjust=0.5,vjust=0,face="plain"),
axis.title.x = element_text(colour="grey20",size=17,angle=0,hjust=.5,vjust=.5,face="plain")) + scale_x_discrete(labels=c("Negative Culture", "Positive Culture"))
p + stat_compare_means(comparisons = list(c(1, 0)), method = "wilcox.test", paired = FALSE, label = "p.signif") + stat_compare_means(label.x = 1.7, label.y = 2.3)+ theme_bw() +
ggtitle("Scaled Maghemite Measure by Culture Status") + theme(axis.text.y = element_text(colour="grey20",size=15,angle=0,hjust=1,vjust=0,face="plain"),
axis.title.y = element_text(colour="grey20",size=15,angle=90,hjust=.5,vjust=.5,face="plain"),
axis.text.x = element_text(colour="grey20",size=12,angle=0,hjust=0.5,vjust=0,face="plain"),
axis.title.x = element_text(colour="grey20",size=17,angle=0,hjust=.5,vjust=.5,face="plain")) + scale_x_discrete(labels=c("Negative Culture", "Positive Culture")) + xlab("Culture Status") + ylab("Scaled Maghemite")
df = read.csv('data/Balanced_NTM_Counts.csv', header = T, stringsAsFactors = F)
## Split, convert to numeric, and factorize
training = df[,'NTM_Counts_Categories']
training = as.factor(as.character(training))
train_data = as.data.frame(df[,2:17])
row.names(train_data) = df[,1]
train_data = as.data.frame(lapply(train_data, function(x) as.numeric(as.character(x))))
### Observed Species
col_p = data.frame(value = numeric())
for (i in 1:length(colnames(train_data))){
q = wilcox.test(train_data[,i]~training, exact = F)
col_p = rbind(col_p, q$p.value)
}
colnames(col_p) = "Culture_p_values"
rownames(col_p) = colnames(train_data)
signif = subset(col_p, Culture_p_values < 0.05)
knitr::kable(col_p)
View(col_p)
df = read.csv('data/Balanced_with_Culture_Status.csv', header = T, stringsAsFactors = F)
## Split, convert to numeric, and factorize
training = df[,'NTM.Culture']
training = as.factor(as.character(training))
train_data = as.data.frame(df[,2:17])
row.names(train_data) = df[,1]
train_data = as.data.frame(lapply(train_data, function(x) as.numeric(as.character(x))))
### Observed Species
col_p = data.frame(value = numeric())
for (i in 1:length(colnames(train_data))){
q = wilcox.test(train_data[,i]~training, exact = F)
col_p = rbind(col_p, q$p.value)
}
colnames(col_p) = "Culture_p_values"
rownames(col_p) = colnames(train_data)
signif = subset(col_p, Culture_p_values < 0.05)
knitr::kable(col_p)
cor_mat = cor(train_data, method = "spearman")
library(corrplot)
cor.mtest <- function(mat, conf.level = 0.95){
mat <- as.matrix(mat)
n <- ncol(mat)
p.mat <- lowCI.mat <- uppCI.mat <- matrix(NA, n, n)
diag(p.mat) <- 0
diag(lowCI.mat) <- diag(uppCI.mat) <- 1
for(i in 1:(n-1)){
for(j in (i+1):n){
tmp <- cor.test(mat[,i], mat[,j], conf.level = conf.level)
p.mat[i,j] <- p.mat[j,i] <- tmp$p.value
lowCI.mat[i,j] <- lowCI.mat[j,i] <- tmp$conf.int[1]
uppCI.mat[i,j] <- uppCI.mat[j,i] <- tmp$conf.int[2]
}
}
return(list(p.mat, lowCI.mat, uppCI.mat))
}
res1 <- cor.mtest(train_data,0.95)
corrplot(cor_mat, p.mat = res1[[1]], sig.level=0.05, type = "lower", order = 'hclust')
cor_mat = cor(train_data, method = "spearman")
cor_mat = cor(train_data, method = "spearman")
View(cor_mat)
library(ggplot2)
library(EMA)
library(ggpubr)
library(randomForest)
## Random Forest with Cross Validation
rf_cv = rfcv(trainx = train_data, trainy = training, cv.fold = 10)
rf_cv$error.cv
View(train_data)
library(dendextend)
# Ward Hierarchical Clustering
d <- dist(train_data, method = "euclidean") # distance matrix
fit <- hclust(d, method="complete")
hcd = as.dendrogram(fit)
colors_to_use = as.numeric(training)
labels_colors(hcd) = colors_to_use
plot.new()
plot(hcd, cex.lab =0.5)
legend('topright', legend = c("Negative", "Positive"),lty=1, col=c("black","red"), cex = 0.75)
library(randomForest)
## Split into Testing and Training Set
# Define train and test sets
set.seed(111)
train.percent = .8
inTrain = rownames(train_data) %in% sample(rownames(train_data), floor(train.percent*length(rownames(train_data))))
train.data = train_data[inTrain,]
test.data = train_data[!inTrain,]
testing.data = as.matrix(test.data)
## Random Forest of training data
rf = randomForest(training ~ ., data=train_data, mtry = 3, ntree=500, importance=TRUE)
## Feature Importance
features = importance(rf, type = 2)
features = features[order(features[,1], decreasing = TRUE),]
features
top = names(features[1:8])
fs_train_data = train_data[,colnames(train_data) %in% top]
rf_cv = rfcv(trainx = fs_train_data, trainy = training, cv.fold = 10)
rf_cv$error.cv
library(dendextend)
# Ward Hierarchical Clustering
d <- dist(train_data, method = "euclidean") # distance matrix
fit <- hclust(d, method="complete")
hcd = as.dendrogram(fit)
colors_to_use = as.numeric(training)
labels_colors(hcd) = colors_to_use
plot.new()
plot(hcd, cex.lab =0.5)
legend('topright', legend = c("Negative", "Positive"),lty=1, col=c("black","red"), cex = 0.75)
library(ggplot2)
library(randomForest)
library(dendextend)
library(DMwR)
library(caret)
library(pROC)
library(fscaret)
library(EMA)
library(ggpubr)
df = read.csv('data/other/Hawiian_Soils.txt', header = T, sep = '\t', stringsAsFactors = F)
rownames(df) = df$Soil_Sample
df$Soil_Sample = NULL
df = as.data.frame(t(df))
training = df[!(is.na(df$NTM.culture)),]
testing_set = df[!(df$NTM.culture == 'pos.' | df$NTM.culture == 'neg.'),]
## Split, convert to numeric, and factorize
training$Culture = as.factor(as.character(training$Culture))
train_data = as.data.frame(training[,1:17])
train_data = as.data.frame(lapply(train_data, function(x) as.numeric(as.character(x))))
Culture = training[,18]
df = cbind(train_data, Culture)
### Observed Species
col_p = data.frame(value = numeric())
for (i in 1:length(colnames(train_data))){
q = wilcox.test(train_data[,i]~training$Culture, exact = F)
col_p = rbind(col_p, q$p.value)
}
colnames(col_p) = "Culture_p_values"
rownames(col_p) = colnames(train_data)
signif = subset(col_p, Culture_p_values < 0.05)
knitr::kable(signif)
load("../data/DADA2_Processed/Taxa_Silva_8_18_Hawaiian.RData")
library(arules)
library(phyloseq)
library(ggplot2)
library(dplyr)
library(vegan)
library(stringr)
library(DESeq2)
library(EMA)
library(reshape2)
ci = function(x){mean(x)+c(-1.96,1.96)*sd(x)/sqrt(length(x))}
my_fun<-function(x){
vals = c(vals, cor.test(x, level)[['p.value']])
}
my_plot_bar = function (physeq, x = "Sample", y = "Abundance", fill = NULL, title = NULL, facet_grid = NULL) {
mdf = psmelt(physeq)
p = ggplot(mdf, aes_string(x = x, y = y, fill = fill))
p = p + geom_bar(stat = "identity", position = "stack", show.legend = T)
p = p + theme(axis.text.x = element_text(angle = -90, hjust = 0))
if (!is.null(facet_grid)) {
p <- p + facet_grid(facet_grid)
}
if (!is.null(title)) {
p <- p + ggtitle(title)
}
return(p)
}
load("../data/DADA2_Processed/Taxa_Silva_8_18_Hawaiian.RData")
setwd("~/Documents/Strong_Lab/NTM_Soil/scripts")
load("../data/DADA2_Processed/Taxa_Silva_8_18_Hawaiian.RData")
load("../data/DADA2_Processed/seqtabnochim_8_18_Hawaiian.RData")
labels = read.csv("../data/DADA2_Processed/NTM_Count_Bi.csv")
labels_to_remove = c("12_56", "12_7")
labels = subset(labels, !(SampleName %in% labels_to_remove))
rows_to_remove = c("HIsoil04", "HIsoil09", "HIsoil00")
seqtab.nochim = subset(seqtab.nochim, !(rownames(seqtab.nochim) %in% rows_to_remove))
empties = (colSums(seqtab.nochim) != 0)
seqtab.nochim = seqtab.nochim[, empties]
samdf = read.csv(file = "../data/DADA2_Processed/metadata.txt", sep='\t', header = T, stringsAsFactors = FALSE)
row.names(samdf) = samdf$X.SampleID
samdf = subset(samdf, !(rownames(samdf) %in% rows_to_remove))
rownames(labels) = labels$SampleName
labels$SampleName = NULL
samdf = cbind(samdf, labels)
samdf$SampleName = paste('HNL ',samdf$SampleName, sep = "")
samdf$SampleName = lapply(samdf$SampleName, function(x){gsub("_", "-", x)})
x = colnames(seqtab.nochim)
taxa_silva = taxa_silva[rownames(taxa_silva) %in% x,]
df = read.csv("../data/DADA2_Processed/Soil_Scaled.csv")
rownames(df) = df$X
df$X = NULL
ps = phyloseq(otu_table(seqtab.nochim,taxa_are_rows = FALSE),sample_data(samdf), tax_table(taxa_silva))
set.seed(1)
ps_rarified = rarefy_even_depth(ps,sample.size = 9214, verbose = F)
ps_phylum = tax_glom(ps_rarified, taxrank = "Phylum")
ps_family = tax_glom(ps_rarified, taxrank = "Family")
Firmicutes = subset_taxa(ps_phylum, Phylum=="Firmicutes")
png('../Images/SupplementaryFigure1B.png', units="in", width=6, height=8, res=1200)
p = plot_bar(Firmicutes, x="NTM_culture", fill = "NTM_culture")
p + theme_bw() + geom_bar(aes(color=NTM_culture, fill=NTM_culture), stat="identity", position="stack", show.legend = F)+ scale_fill_discrete(breaks = "Firmicutes") + labs(title="Total Firmicutes Counts by NTM Culture Status", family="Arial") + scale_x_discrete(labels= c("Negative\nCulture", "Positive\nCulture")) + theme(axis.text=element_text(size=18),axis.title=element_text(size=14,face="bold", family="Arial"), axis.text.x = element_text(angle = 0, hjust = .5, face="bold", family = "Arial", size = 16)) + ylab("Read Abundance") + xlab("")
dev.off()
erich <- estimate_richness(ps_rarified, measures = c("Observed", "Shannon", "Simpson", "Fisher"))
ttest_culture <- t(sapply(erich, function(x) unlist(t.test(x~sample_data(ps_rarified)$NTM_culture)[c("estimate","p.value","statistic","conf.int")])))
erich["X.SampleID"] = rownames(erich)
erich2 = as.data.frame(erich)
x = sample_data(ps_rarified)
names = x$SampleName
names = unlist(names)
erich["SampleName"] = names
colsto = c("SampleName", "Shannon")
y2 = erich[colnames(erich) %in% colsto]
write.csv(y2, "../data/DADA2_Processed/ShannonValues.csv", quote = F, row.names = F)
erich <- estimate_richness(ps_rarified, measures = c("Observed", "Shannon", "Simpson", "Fisher"))
ttest_count <- t(sapply(erich, function(x) unlist(t.test(x~sample_data(ps_rarified)$NTM_Counts_Categories)[c("estimate","p.value","statistic","conf.int")])))
write.csv(ttest_culture, "../data/DADA2_Processed/ttest/Culture.csv", quote = F, row.names = T)
write.csv(ttest_count, "../data/DADA2_Processed/ttest/Counts.csv", quote = F, row.names = T)
x = estimate_richness(ps_rarified, measures = c("Shannon"))
samdf = ps_rarified@sam_data
vac_dust = samdf[, c("NTM_culture", "NTM_Counts_Categories")]
vac = merge(x, vac_dust, by = 0)
nos = vac[vac$NTM_culture == "negative",]
yes = vac[vac$NTM_culture == "positive",]
ci_no = ci(nos$Shannon)
ci_yes = ci(yes$Shannon)
mean_no = mean(nos$Shannon)
no_value = mean(nos$Shannon)*sd(nos$Shannon)/sqrt(length(nos$Shannon))
paste(as.character(mean_no), " +/- ", as.character(no_value), sep = "")
mean_yes = mean(yes$Shannon)
yes_value = mean(yes$Shannon)*sd(yes$Shannon)/sqrt(length(yes$Shannon))
paste(as.character(mean_yes), " +/- ", as.character(yes_value), sep = "")
nos_vec = as.data.frame(c(mean_no, ci_no))
yes_vec = c(mean_yes, ci_yes)
nos_vec = cbind(nos_vec, yes_vec)
colnames(nos_vec) = c("Negative", "Positive")
nos_vec = as.data.frame(t(nos_vec))
colnames(nos_vec) = c("Mean", "Lower_CI", "Upper_CI")
nos_vec$Group = rownames(nos_vec)
nos_vec$Feature = "NTM Culture Status"
nos_melted = melt(nos_vec, "Group")
total_cis = nos_vec
png('../Images/SupplementaryFigure2A.png', units="in", width=5, height=8, res=600)
limits <- aes(ymax = total_cis$Upper_CI,ymin = total_cis$Lower_CI)
p <- ggplot(data = total_cis, aes(x = Feature, y = Mean, fill = Group))
p + geom_bar(stat = "identity",position = position_dodge(0.9), show.legend = F) + geom_errorbar(limits, position = position_dodge(0.9),width = 0.25) + geom_text(aes(Feature,-.1, label = Group), position = position_dodge2(width=0.9, padding = 2),  size=6) + scale_fill_manual(values=c("#4863A0", "#FFF380")) + theme_bw() + theme(axis.text.y = element_text(colour="grey20",size=18,angle=0,hjust=1,vjust=0,face="plain", family = "Arial"),
axis.title.y = element_text(colour="grey20",size=18,angle=90,hjust=.5,vjust=.5,face="plain", family = "Arial"),
axis.text.x = element_text(colour="grey20",size=18,angle=0,hjust=0.5,vjust=0,face="plain", family = "Arial"),
axis.title.x = element_text(colour="grey20",size=18,angle=0,hjust=.5,vjust=.5,face="plain", family = "Arial")) + xlab("") + ylab("Shannon Diversity Index") +ggtitle("Alpha Diversity by Mycobacterium Culture Status")
dev.off()
x = estimate_richness(ps_rarified, measures = c("Shannon"))
samdf = ps_rarified@sam_data
vac_dust = samdf[, c("NTM_culture", "NTM_Counts_Categories")]
vac = merge(x, vac_dust, by = 0)
nos = vac[vac$NTM_Counts_Categories == "Low",]
yes = vac[vac$NTM_Counts_Categories == "High",]
ci_no = ci(nos$Shannon)
ci_yes = ci(yes$Shannon)
mean_no = mean(nos$Shannon)
no_value = mean(nos$Shannon)*sd(nos$Shannon)/sqrt(length(nos$Shannon))
paste(as.character(mean_no), " +/- ", as.character(no_value), sep = "")
mean_yes = mean(yes$Shannon)
yes_value = mean(yes$Shannon)*sd(yes$Shannon)/sqrt(length(yes$Shannon))
paste(as.character(mean_yes), " +/- ", as.character(yes_value), sep = "")
nos_vec = as.data.frame(c(mean_no, ci_no))
yes_vec = c(mean_yes, ci_yes)
nos_vec = cbind(nos_vec, yes_vec)
colnames(nos_vec) = c("Low", "High")
nos_vec = as.data.frame(t(nos_vec))
colnames(nos_vec) = c("Mean", "Lower_CI", "Upper_CI")
nos_vec$Group = rownames(nos_vec)
nos_vec$Feature = "Discretized NTM Microbiome Counts"
nos_melted = melt(nos_vec, "Group")
total_cis = rbind(total_cis, nos_vec)
total_cis = nos_vec
png('../Images/SupplementaryFigure2A.png', units="in", width=5, height=8, res=600)
limits <- aes(ymax = total_cis$Upper_CI,ymin = total_cis$Lower_CI)
p <- ggplot(data = total_cis, aes(x = Feature, y = Mean, fill = Group))
p + geom_bar(stat = "identity",position = position_dodge(0.9), show.legend = F) + geom_errorbar(limits, position = position_dodge(0.9),width = 0.25) + geom_text(aes(Feature,-.1, label = Group), position = position_dodge2(width=0.9, padding = 2),  size=6) + scale_fill_manual(values=c("#4863A0", "#FFF380")) + theme_bw() + theme(axis.text.y = element_text(colour="grey20",size=18,angle=0,hjust=1,vjust=0,face="plain", family = "Arial"),
axis.title.y = element_text(colour="grey20",size=18,angle=90,hjust=.5,vjust=.5,face="plain", family = "Arial"),
axis.text.x = element_text(colour="grey20",size=18,angle=0,hjust=0.5,vjust=0,face="plain", family = "Arial"),
axis.title.x = element_text(colour="grey20",size=18,angle=0,hjust=.5,vjust=.5,face="plain", family = "Arial")) + xlab("") + ylab("Shannon Diversity Index") +ggtitle("Alpha Diversity by Mycobacterium Count Category")
dev.off()
x = estimate_richness(ps_rarified, measures = c("Shannon"))
samdf = ps_rarified@sam_data
vac_dust = samdf[, c("NTM_culture", "NTM_Counts_Categories")]
vac = merge(x, vac_dust, by = 0)
## Change Culture Status
nos = vac[vac$NTM_culture == "negative",]
yes = vac[vac$NTM_culture == "positive",]
ci_no = ci(nos$Shannon)
ci_yes = ci(yes$Shannon)
mean_no = mean(nos$Shannon)
no_value = mean(nos$Shannon)*sd(nos$Shannon)/sqrt(length(nos$Shannon))
paste(as.character(mean_no), " +/- ", as.character(no_value), sep = "")
mean_yes = mean(yes$Shannon)
yes_value = mean(yes$Shannon)*sd(yes$Shannon)/sqrt(length(yes$Shannon))
paste(as.character(mean_yes), " +/- ", as.character(yes_value), sep = "")
nos_vec = as.data.frame(c(mean_no, ci_no))
yes_vec = c(mean_yes, ci_yes)
nos_vec = cbind(nos_vec, yes_vec)
## Change Group
colnames(nos_vec) = c("Negative", "Positive")
nos_vec = as.data.frame(t(nos_vec))
colnames(nos_vec) = c("Mean", "Lower_CI", "Upper_CI")
nos_vec$Group = rownames(nos_vec)
nos_vec$Feature = "NTM Culture Status"
nos_melted = melt(nos_vec, "Group")
total_cis = nos_vec
png('../Images/SupplementaryFigure2A.png', units="in", width=5, height=8, res=600)
limits <- aes(ymax = total_cis$Upper_CI,ymin = total_cis$Lower_CI)
p <- ggplot(data = total_cis, aes(x = Feature, y = Mean, fill = Group))
p + geom_bar(stat = "identity",position = position_dodge(0.9), show.legend = F) + geom_errorbar(limits, position = position_dodge(0.9),width = 0.25) + geom_text(aes(Feature,-.1, label = Group), position = position_dodge2(width=0.9, padding = 2),  size=6) + scale_fill_manual(values=c("#4863A0", "#FFF380")) + theme_bw() + theme(axis.text.y = element_text(colour="grey20",size=18,angle=0,hjust=1,vjust=0,face="plain", family = "Arial"),
axis.title.y = element_text(colour="grey20",size=18,angle=90,hjust=.5,vjust=.5,face="plain", family = "Arial"),
axis.text.x = element_text(colour="grey20",size=18,angle=0,hjust=0.5,vjust=0,face="plain", family = "Arial"),
axis.title.x = element_text(colour="grey20",size=18,angle=0,hjust=.5,vjust=.5,face="plain", family = "Arial")) + xlab("") + ylab("Shannon Diversity Index") +ggtitle("Alpha Diversity by Mycobacterium Culture Status")
dev.off()
png('../Images/SupplementaryBrayBetaDiversity.png', units="in", width=8, height=8, res=600)
ordinal = ordinate(ps_rarified, method = "PCoA", distance = "bray")
p7 = plot_ordination(ps_rarified, ordinal, type = "samples", color = "NTM_culture", shape = "NTM_Counts_Categories", title = "Beta Diversity by Culture Status")
p7 + geom_point(size=7, alpha=0.75)
dev.off()
ps_n = transform_sample_counts(ps_rarified, function(x) x / sum(x))
b2 = tax_glom(ps_n, taxrank = "Phylum")
Phylum10 = names(sort(taxa_sums(b2), TRUE)[1:6])
x2 = prune_taxa(Phylum10, b2)
x = as.data.frame(otu_table(x2))
x$Other = 1 - rowSums(x)
x = as.matrix(x)
taxax = as.data.frame(tax_table(x2))
Other = data.frame(Kingdom="Other", Phylum="Other", Class=NA, Order=NA, Family=NA, Genus=NA)
taxax = rbind(taxax, Other)
rownames(taxax)[7] = "Other"
top_Phylum = as.character(taxax$Phylum)
taxax = as.matrix(taxax)
ps_n = transform_sample_counts(ps_rarified, function(x) x / sum(x))
b2 = tax_glom(ps_n, taxrank = "Phylum")
Phylum10 = names(sort(taxa_sums(b2), TRUE)[1:6])
x2 = prune_taxa(Phylum10, b2)
x = as.data.frame(otu_table(x2))
x$Other = 1 - rowSums(x)
x = as.matrix(x)
taxax = as.data.frame(tax_table(x2))
x2
tax_table(x2)
q = tax_table(x2)
q@.Data
c = q@.Data
View(c)
taxax = as.data.frame(c)
Other = data.frame(Kingdom="Other", Phylum="Other", Class=NA, Order=NA, Family=NA, Genus=NA)
taxax = rbind(taxax, Other)
rownames(taxax)[7] = "Other"
top_Phylum = as.character(taxax$Phylum)
taxax = as.matrix(taxax)
samdf = sample_data(x2)
ps_x = phyloseq(otu_table(x,taxa_are_rows = F),sample_data(samdf), tax_table(taxax))
gp.norm_m =  merge_samples(ps_x, "NTM_culture")
sample_data(gp.norm_m)$NTM_culture <- factor(sample_names(gp.norm_m))
ps_x2 = transform_sample_counts(gp.norm_m, function(x) x / sum(x) )
png('../Images/SupplementaryFigure2C.png', units="in", width=6, height=8, res=600)
p = plot_bar(ps_x2, fill = "Phylum")
p + theme_bw()+ geom_bar(aes(color=Phylum, fill=Phylum), stat="identity", position="stack", show.legend = F)+ scale_fill_discrete(breaks = top_Phylum)+ labs(title="Phylum Plot by Mycobacterium Culture Status")+ theme_bw() + theme(axis.text=element_text(size=18),axis.title=element_text(size=18), axis.text.x = element_text(angle = 0, hjust = .5, size = 16, face = "bold"), axis.text.y=element_blank(), axis.ticks.y=element_blank()) + xlab("") + ylab("Relative Abundance") + scale_x_discrete(labels= c(" Negative \nCulture", " Positive \nCulture"))
dev.off()
png('../Images/SupplementaryFigure2C.png', units="in", width=6, height=8, res=600)
p = plot_bar(ps_x2, fill = "Phylum")
p + theme_bw()+ geom_bar(aes(color=Phylum, fill=Phylum), stat="identity", position="stack", show.legend = F)+ scale_fill_discrete(breaks = top_Phylum)+ labs(title="Phylum Plot by Mycobacterium Culture Status")+ theme_bw() + theme(axis.text=element_text(size=18),axis.title=element_text(size=18), axis.text.x = element_text(angle = 0, hjust = .5, size = 16, face = "bold")) + xlab("") + ylab("Relative Abundance") + scale_x_discrete(labels= c(" Negative \nCulture", " Positive \nCulture"))
dev.off()
